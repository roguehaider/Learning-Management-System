import { Component } from '@angular/core';
import { Service } from 'src/app/services/service';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import autoTable from 'jspdf-autotable';

@Component({
  selector: 'app-student-challan',
  templateUrl: './student-challan.component.html',
  styleUrls: ['./student-challan.component.scss']
})
export class StudentChallanComponent {
  challanData: any;
  year!: number;
  month!: number;

  months = [
    { val: 1, label: 'January' },
    { val: 2, label: 'February' },
    { val: 3, label: 'March' },
    { val: 4, label: 'April' },
    { val: 5, label: 'May' },
    { val: 6, label: 'June' },
    { val: 7, label: 'July' },
    { val: 8, label: 'August' },
    { val: 9, label: 'September' },
    { val: 10, label: 'October' },
    { val: 11, label: 'November' },
    { val: 12, label: 'December' }
  ];
  constructor(private service: Service) {}

  ngOnInit(): void {
    const currentDate = new Date();
    this.year = currentDate.getFullYear();
    this.month = currentDate.getMonth();
  }

  fetchChallan(): void {
    this.service.getChallan(this.year, this.month).subscribe(
      (response) => {
        this.challanData = response.challanData;
        console.log(this.challanData);
        this.generatePDF();
      },
      (error) => {
        console.error('Error fetching challan:', error);
      }
    );
  }


generatePDF(): void {
  const doc = new jsPDF();

  // Title
  doc.setFontSize(22);
  doc.setTextColor(31, 63, 73); 
  doc.setFont('helvetica', 'bold');
  doc.text('School Fee Receipt', 105, 15, { align: 'center' });

  // Subtitle
  doc.setTextColor(31, 63, 73); 
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  const formattedMonth = this.months.find(m => m.val === this.month)?.label;
  doc.text(`For the month of ${formattedMonth} ${this.year}`, 105, 22, { align: 'center' });

  // Logo or school name (optional, add as per your school's branding)
  // doc.addImage(logoImg, 'PNG', 15, 15, 30, 30); // Example for adding a logo

  // Spacing
  doc.setFontSize(14);
  doc.setTextColor(31, 63, 73); 
  doc.setTextColor(0, 0, 0);

  // Receipt Items
  const receiptItems = [
    { description: 'Name:', value: `${this.challanData.FName} ${this.challanData.LName}` },
    { description: 'Class:', value: this.challanData.class },
    { description: 'Roll No:', value: this.challanData.roll_No },
    { description: 'Tuition Fee:', value: `${this.challanData.TutionFee} PKR` }, 
    { description: 'Absentees Fine:', value: `${this.challanData.Absentees * 50} PKR` }, 
    { description: 'Late Fee:', value: `${this.challanData.fine} PKR` }, 
    { description: 'Due Date:', value: this.challanData.DueDate },
  ];

  const totalPosition = receiptItems.length + 1; 
  // Positioning variables
  let startY = 40;
  const lineHeight = 10;

  // Output receipt items
  receiptItems.forEach((item, index) => {
      doc.setFontSize(12);
      doc.setTextColor(31, 63, 73); 
      doc.text(item.description, 30, startY);
      doc.text(item.value, 130, startY);
      startY += lineHeight;

      // Add horizontal line above Total Fee
      if (index === totalPosition - 2) {
          doc.setLineWidth(0.5);
          doc.line(20, startY - 5, 190, startY - 5);
      }
  });
  
  // Spacing
  doc.setFontSize(14);
  doc.setTextColor(31, 63, 73); 
  doc.setTextColor(0, 0, 0);

  // Total Fee
  doc.setFontSize(12);
  doc.setTextColor(31, 63, 73); 
  doc.setFont('helvetica', 'bold');
  doc.text('Total:', 30, startY);
  doc.text(`${this.challanData.total} PKR`, 130, startY);

  // Footer
  doc.setFontSize(10);
  doc.setTextColor(100);
  doc.text('Generated by E-Parenting System', 105, doc.internal.pageSize.height - 10, { align: 'center' });

  // Additional styling for a school fee receipt
  doc.setLineWidth(0.6);
  doc.line(20, 30, 190, 30); 

  // Save the document
  doc.save(`Fee_Challan_${formattedMonth}/${this.year}.pdf`);
}

}
